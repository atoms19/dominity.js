import {
   state,
   derived,
   DominityReactive,
   effect,
untracked
} from "./reactivity.js";
import { DominityElement } from "./dom.js";
import { DominityRouter } from "./router.js";
import {el} from './builder.js'
import {$el,$$el} from './elements.js'
import { createStore,DominityStore } from "./store.js";
import { htmlTags } from './elements.js';

var D = htmlTags.reduce((dobj, tag) => {
   dobj[tag] = (...args) => {
      let Delem = el(tag, ...args);
      //dobj.root?.appendChild(Delem.elem);
      return Delem;
   };
   return dobj;
}, {});

export var {
   a,
   abbr,
   address,
   area,
   article,
   aside,
   audio,
   b,
   base,
   bdi,
   bdo,
   blockquote,
   body,
   br,
   button,
   canvas,
   caption,
   cite,
   code,
   col,
   colgroup,
   data,
   datalist,
   dd,
   del,
   details,
   dfn,
   dialog,
   div,
   dl,
   dt,
   em,
   embed,
   fieldset,
   figcaption,
   figure,
   footer,
   form,
   h1,
   h2,
   h3,
   h4,
   h5,
   h6,
   header,
   hr,
   html,
   i,
   iframe,
   img,
   input,
   ins,
   kbd,
   label,
   legend,
   li,
   link,
   main,
   map,
   mark,
   meta,
   meter,
   nav,
   noscript,
   object,
   ol,
   optgroup,
   option,
   output,
   p,
   param,
   picture,
   pre,
   progress,
   q,
   rb,
   rp,
   rt,
   rtc,
   s,
   samp,
   script,
   section,
   select,
   small,
   source,
   span,
   strong,
   style,
   sub,
   summary,
   sup,
   table,
   tbody,
   td,
   template,
   textarea,
   tfoot,
   th,
   thead,
   time,
   title,
   tr,
   u,
   ul,
   video,
   wbr,
   slot,
   svg,
   path,
   circle,
   rect,
   polygon,
   polyline,
   line,
   menu,
   menuitem,
   portal,
   ruby,
   track,
} = D;

export {
   createStore,
   DominityStore,
   effect,
   derived,
   state,
   DominityReactive,
   $el,
   $$el,
   el
};

export default {
   ...D,
   effect,
   createStore,
   derived,
   state,
   DominityReactive,
   $el,
   $$el,
   el,
   DominityRouter,
   DominityElement
};
